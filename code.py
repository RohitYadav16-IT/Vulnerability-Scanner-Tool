import sys
import os
import socket
import subprocess
import nmap
import requests
from PyQt5.QtWidgets import (
    QApplication,
    QMainWindow,
    QLabel,
    QLineEdit,
    QPushButton,
    QTextEdit,
    QVBoxLayout,
    QWidget,
    QFileDialog,
    QHBoxLayout,
    QMessageBox
)
from PyQt5 import QtGui  # Import QtGui for QColor
from PyQt5.QtCore import Qt, QThread, pyqtSignal
from PyQt5.QtGui import QTextCursor  # Import QTextCursor for managing text cursor

class PortScanThread(QThread):
    progress = pyqtSignal(str)
    result = pyqtSignal(list)

    def __init__(self, target, use_nmap=True, port_range="1-65535"):
        super().__init__()
        self.target = target
        self.use_nmap = use_nmap
        self.port_range = port_range

    def run(self):
        if self.use_nmap:
            self.progress.emit(f"Scanning open ports on {self.target} with Nmap...\n")
            try:
                nm = nmap.PortScanner()
                nm.scan(self.target, self.port_range)
                open_ports = [port for port, details in nm[self.target]['tcp'].items() if details['state'] == 'open']
                self.result.emit(open_ports)
            except Exception as e:
                self.progress.emit(f"Nmap error: {str(e)}\nFalling back to socket scanning...\n")
                self.socket_scan()
        else:
            self.socket_scan()

    def socket_scan(self):
        open_ports = []
        self.progress.emit(f"Scanning open ports on {self.target} with socket...\n")
        for port in range(1, 1025):
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(1)
            result = s.connect_ex((self.target, port))
            if result == 0:
                open_ports.append(port)
            s.close()
        self.result.emit(open_ports)


class VulnerabilityScanner(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Simple Vulnerability Scanner")
        self.setGeometry(100, 100, 600, 400)

        # Disclaimers and Policies
        disclaimer_label = QLabel(
            "Disclaimer: This tool is for educational purposes only.\n"
            "Ensure you have permission before scanning any network."
        )
        disclaimer_label.setStyleSheet("color: red; font-weight: bold;")
        
        self.target_input = QLineEdit()
        self.target_input.setPlaceholderText("Enter target IP or URL")
        
        self.port_range_input = QLineEdit()
        self.port_range_input.setPlaceholderText("Enter port range (default: 1-65535)")
        self.port_range_input.setText("1-65535")  # Default port range
        
        self.output_area = QTextEdit()
        self.output_area.setReadOnly(True)
        
        scan_ports_button = QPushButton("Scan Open Ports")
        scan_ports_button.clicked.connect(self.scan_open_ports)
        
        scan_vulns_button = QPushButton("Scan Vulnerabilities")
        scan_vulns_button.clicked.connect(self.scan_vulnerabilities)
        
        save_results_button = QPushButton("Save Results")
        save_results_button.clicked.connect(self.save_results)
        
        # Layouts
        button_layout = QHBoxLayout()
        button_layout.addWidget(scan_ports_button)
        button_layout.addWidget(scan_vulns_button)
        button_layout.addWidget(save_results_button)
        
        main_layout = QVBoxLayout()
        main_layout.addWidget(disclaimer_label)
        main_layout.addWidget(self.target_input)
        main_layout.addWidget(self.port_range_input)
        main_layout.addLayout(button_layout)
        main_layout.addWidget(self.output_area)
        
        container = QWidget()
        container.setLayout(main_layout)
        
        self.setCentralWidget(container)

    def append_output(self, text, color="black"):
        """Append formatted text to the output area."""
        self.output_area.setTextColor(QtGui.QColor(color))  # Use QtGui.QColor to set text color
        self.output_area.moveCursor(QTextCursor.End)
        self.output_area.insertPlainText(text)
        self.output_area.setTextColor(QtGui.QColor("black"))  # Reset to default color
        self.output_area.moveCursor(QTextCursor.End)
        
    def save_results(self):
        """Save scan results to a file."""
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        file_name, _ = QFileDialog.getSaveFileName(
            self,
            "Save Results",
            "",
            "Text Files (*.txt);;All Files (*)",
            options=options
        )
        if file_name:
            with open(file_name, "w") as file:
                file.write(self.output_area.toPlainText())
            self.append_output(f"\nResults saved to {file_name}\n", "green")

    def scan_open_ports(self):
        target = self.target_input.text().strip()
        if not target:
            self.append_output("Please enter a target IP address.\n", "red")
            return

        port_range = self.port_range_input.text().strip() or "1-65535"
        self.output_area.clear()
        self.append_output(f"Scanning open ports on {target}...\n")

        self.port_scan_thread = PortScanThread(target, use_nmap=True, port_range=port_range)
        self.port_scan_thread.progress.connect(self.append_output)
        self.port_scan_thread.result.connect(self.display_open_ports)
        self.port_scan_thread.start()

    def display_open_ports(self, open_ports):
        if open_ports:
            self.append_output("Open Ports:\n", "blue")
            for port in open_ports:
                self.append_output(f"Port {port} is open\n", "blue")
        else:
            self.append_output("No open ports found or there was an error during scanning.\n", "red")

    def scan_vulnerabilities(self):
        target = self.target_input.text().strip()
        if not target:
            self.append_output("Please enter a target URL.\n", "red")
            return

        self.output_area.append(f"Scanning {target} for vulnerabilities...\n")

        try:
            response = requests.get(target, timeout=10)
            server = response.headers.get('Server', 'Unknown')
            self.append_output(f"Server: {server}\n", "blue")

            # Simple version check for common servers
            if 'Apache' in server:
                version = server.split('/')[1] if '/' in server else 'Unknown'
                self.append_output(f"Apache Version: {version}\n", "blue")
                if float(version.split('.')[0]) < 2.4 or (float(version.split('.')[0]) == 2.4 and int(version.split('.')[1]) < 46):
                    self.append_output("Apache version is outdated. Consider updating to the latest version.\n", "orange")
                else:
                    self.append_output("Apache version is up-to-date.\n", "green")

            elif 'nginx' in server:
                version = server.split('/')[1] if '/' in server else 'Unknown'
                self.append_output(f"Nginx Version: {version}\n", "blue")
                if float(version.split('.')[0]) < 1.21:
                    self.append_output("Nginx version is outdated. Consider updating to the latest version.\n", "orange")
                else:
                    self.append_output("Nginx version is up-to-date.\n", "green")
            else:
                self.append_output("No specific vulnerabilities found for this server.\n", "green")

        except requests.exceptions.RequestException as e:
            self.append_output(f"Error: {str(e)}\n", "red")

    def show_error_message(self, title, message):
        """Show an error message dialog."""
        msg_box = QMessageBox()
        msg_box.setIcon(QMessageBox.Critical)
        msg_box.setWindowTitle(title)
        msg_box.setText(message)
        msg_box.exec_()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = VulnerabilityScanner()
    window.show()
    sys.exit(app.exec_())
